import React, { Component } from 'react'
import { ImageBackground, Picker } from 'react-native'
import { Calendar, CalendarList, Agenda } from 'react-native-calendars'
import ReactFontFace from 'react-font-face'
import {
  AppRegistry,
  StyleSheet,
  Text,
  View,
  Image
} from 'react-native'

class Register extends Component{
  constructor(props){
    super(props);
    this.state={
      ChosenDate:'',
      ChosenTimeSlot: null,
    }
    //no need for state
  }
  
WhichDay(day){
    switch (Number(day)){
      case 0:
        day = "Sunday";
        break;
    case 1:
        day = "Monday";
        break;
    case 2:
        day = "Tuesday";
        break;
    case 3:
        day = "Wednesday";
        break;
    case 4:
        day = "Thursday";
        break;
    case 5:
        day = "Friday";
        break;
    case 6:
        day = "Saturday";
    }
    return day;
  }
  
MinDate(date){
    var d = date.split("-");
    var new_date;
    
    if(d[1] == '30' && d[2] == '4'|'6'|'9'|'11'){
        
        new_date='1'+'-'+Number(d[2])+1+'-'+Number(d[3]);
    }
    else if(d[1] == '31' && d[2] == '1'|'3'|'5'|'7'|'8'|'10'|'12'){
        
        if(d[2] == '12'){
            
            new_date='1'+'-'+'1'+'-'+Number(d[3])+1;
        }
        else{
            new_date='1'+'-'+(Number(d[2])+1)+'-'+Number(d[3]);
        }
    }
    else if(d[1] == '28' && Number(d[3])%4 == 0){
        
            new_date='28'+'-'+'2'+'-'+Number(d[3]);
    }
     else if(d[1] == '28' && Number(d[3])%4 != 0){
         
             new_date='1'+'-'+'3'+'-'+Number(d[3]);
     }
     else {
         
         
         new_date=(Number(d[1])+1+'-'+d[2]+'-'+d[3]).toString();
         
        }
    return (new_date);
}

MaxDate(date){
    var i = 0;
    var new_date;
    var dayName;
    date = date.split("-");
    var d = Number(date[1]);
    var m = Number(date[2]);
    var y = Number(date[3]);
    var Dates=[];
    
    for (i; i < 7; i++){
        
            if(d == 30 && m == 4|6|9|11){
                
                     d =1;
                     m = m+1; 
                        
            }
            else if(d == 31 && m == 1|3|5|7|8|10|12){
                if(m == 12){
                    
                     d =1;
                     m = 1;
                     y = y + 1;
                }
                else{
                    d = 1;
                    m = m+1;
                }
            }
            else if(d == 28 && y%4 == 0){
                
                     d = 29;
                     m = 2;
            }
            else if(d == 28 && y%4 != 0 ){
                     d = 1;
                     m = 3;
             }
            else{
                    d += 1;
                      
            }
                
        if(date[0]+1 == 7){
           date[0] = 0;
                }
        else{
            date[0]++;
        }
        
         dayName = this.WhichDay(date[0]);
      
         new_date=(dayName+'/'+d.toString()+'-'+ m.toString() +'-'+ y.toString());
         Dates.push(new_date);
    }
    return (Dates.map(
          (Date => (
           <Picker.Item label={(Date.split("/"))[0]+ ":"+ ((Date.split("/")))[1] } value={((Date.split("/")))[1]} />
          )))
        );
}

TodayDate(){
  var x = new Date();
  var day = x.getDay();
  var month = x.getMonth();
  x = x.toString();
  var my_date= x.split(" ");
  var str = day.toString()+'-'+my_date[2].toString()+'-'+month.toString()+'-'+my_date[3].toString();

  return(str);
}
  render(){
    const resizeMode = 'cover';
    return (
      <View>
        <Picker
          selectedValue={this.state.ChosenTimeSlot}
          style={{ height: 50, width: 150 }}
          onValueChange={(itemValue, itemIndex) => this.setState({ChosenTimeSlot: itemValue})}>
          <Picker.Item label="12:00-14:00" value="first" />
          <Picker.Item label="18:00-20:00" value="second" />
        </Picker>
        <Picker
           selectedValue={this.state.ChosenDate}
           onValueChange={ (Date) => ( this.setState({ChosenDate: Date})) } >

           {this.MaxDate(this.TodayDate())}
      </Picker>
        <View> 
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  title: {
    color: 'blue',
    fontWeight: 'bold',
    fontSize: 30,
  },
  submit: {
    color: 'red',
  },
});
AppRegistry.registerComponent('App', () => Register)
